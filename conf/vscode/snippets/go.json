{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

  "Parse command arg": {
    "prefix": "goarg",
    "body": [
      "func parseArg() options {",
      "  var opts options",
      "",
      "  _, err := flags.Parse(&opts)",
      "  if err != nil {",
      "    log.Fatal(err)",
      "  }",
      "",
      "  return opts",
      "}",
    ],
  },

  "Setup logger": {
    "prefix": "golog",
    "body": [
      "func setupLogger(verbose bool) *zap.SugaredLogger {",
      "  config := zap.NewDevelopmentConfig()",
      "  config.OutputPaths = []string{"stdout"}",
      "",
      "  if verbose {",
      "    config.Level = zap.NewAtomicLevelAt(zap.DebugLevel)",
      "  } else {",
      "    config.Level = zap.NewAtomicLevelAt(zap.InfoLevel)",
      "  }",
      "",
      "  zl, _ := config.Build()",
      "  logger := zl.Sugar()",
      "",
      "  return logger",
      "}",
    ],
  },
}
