{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Parse command arg": {
    "prefix": "gopopt",
    "body": [
      "package popt",
      "",
      "import (",
      "  \"os\"",
      "  \"github.com/jessevdk/go-flags\"",
      ")",
      "",
      "type MyOptions struct {",
      "  Verbose bool `short:\"v\" long:\"verbose\" required:\"false\" description:\"Show verbose debug information\"`",
      "}",
      "",
      "var GlobalOptions *MyOptions = &MyOptions{}",
      "",
      "func ParseArg() {",
      "  _, err := flags.Parse(GlobalOptions)",
      "  if err != nil {",
      "    os.Exit(1)",
      "  }",
      "}",
    ],
  },
  "Setup logger": {
    "prefix": "goplog",
    "body": [
      "package plog",
      "",
      "import \"go.uber.org/zap\"",
      "",
      "var Logger *zap.SugaredLogger",
      "var DefaultVerbose = true",
      "var DefaultOutput = []string{\"stderr\"}",
      "",
      "func SetupLogger(verbose bool) {",
      "  config := zap.NewDevelopmentConfig()",
      "  config.OutputPaths = DefaultOutput",
      "",
      "  if verbose {",
      "    config.Level = zap.NewAtomicLevelAt(zap.DebugLevel)",
      "  } else {",
      "    config.Level = zap.NewAtomicLevelAt(zap.InfoLevel)",
      "  }",
      "",
      "  zl, _ := config.Build()",
      "  Logger = zl.Sugar()",
      "}",
      "",
      "func checkLogger() {",
      "  if Logger == nil {",
      "    SetupLogger(DefaultVerbose)",
      "  }",
      "}",
      "",
      "func Debug(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Debug(args...)",
      "}",
      "",
      "func Info(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Info(args...)",
      "}",
      "",
      "func Warn(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Warn(args...)",
      "}",
      "",
      "func Error(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Error(args...)",
      "}",
      "",
      "func Fatal(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Fatal(args...)",
      "}",
      "",
      "func Panic(args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Panic(args...)",
      "}",
      "",
      "func Debugf(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Debugf(template, args...)",
      "}",
      "",
      "func Infof(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Infof(template, args...)",
      "}",
      "",
      "func Warnf(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Warnf(template, args...)",
      "}",
      "",
      "func Errorf(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Errorf(template, args...)",
      "}",
      "",
      "func Fatalf(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Fatalf(template, args...)",
      "}",
      "",
      "func Panicf(template string, args ...interface{}) {",
      "  checkLogger()",
      "  Logger.Panicf(template, args...)",
      "}",
    ],
  },
}
