snippet myarg
abbr global myarg
options head
  import (
    "log"
  
    flags "github.com/jessevdk/go-flags"
  )
  
  type GlobalArgs struct {
    Verbose bool \`short:"v" long:"verbose" description:"Verbose output"\`
  }
  
  var globalArgs *GlobalArgs
  
  func ParseGlobalArgs() *GlobalArgs {
    globalArgs = new(GlobalArgs)
  
    _, err := flags.Parse(globalArgs)
    if err != nil {
      log.Fatal(err)
    }
  
    return globalArgs
  }
  
  func GetGlobalArgs() *GlobalArgs {
    if globalArgs == nil {
      ParseGlobalArgs()
    }
  
    return globalArgs
  }


snippet mylog
abbr global mylog
options head  import (
  import (
    "fmt"
    "log"
    "os"
    "path/filepath"
    "reflect"
    "runtime"
    "strconv"
    "time"
  
    "github.com/comail/colog"
    "github.com/fatih/color"
  )
  
  type LoggerOptions struct {
    Verbose bool
    Fatal   bool
  }
  
  type LoggerOptionType func(*LoggerOptions)
  
  var LogStd *log.Logger
  var LogErr *log.Logger
  
  func LOVerbose(verbose bool) LoggerOptionType {
    return func(options *LoggerOptions) {
      options.Verbose = verbose
    }
  }
  
  func LOFatal(fatal bool) LoggerOptionType {
    return func(options *LoggerOptions) {
      options.Fatal = fatal
    }
  }
  
  func SetupLogger() {
    clStd := colog.NewCoLog(os.Stdout, "", 0)
    clStd.SetDefaultLevel(colog.LInfo)
    clStd.SetMinLevel(colog.LDebug)
    clStd.ParseFields(true)
  
    clErr := colog.NewCoLog(os.Stderr, "", 0)
    clErr.SetDefaultLevel(colog.LInfo)
    clErr.SetMinLevel(colog.LDebug)
    clErr.ParseFields(true)
  
    LogStd = clStd.NewLogger()
    LogErr = clErr.NewLogger()
  }
  
  func getLoggingOption(optionOpes []LoggerOptionType) *LoggerOptions {
    options := &LoggerOptions{
      Verbose: false,
    }
  
    for _, optionOpe := range optionOpes {
      optionOpe(options)
    }
  
    return options
  }
  
  func logging(ld *log.Logger, text interface{}, optionOpes []LoggerOptionType) {
    options := getLoggingOption(optionOpes)
  
    if options.Verbose && !GetGlobalArgs().Verbose {
      // noop
    } else {
      _, sourceFileName, sourceFileLineNum, _ := runtime.Caller(2)
      fileinfo := color.CyanString(filepath.Base(sourceFileName) + ":" + strconv.Itoa(sourceFileLineNum))
      date := time.Now().Format("2006-01-02 15:04:05")
  
      var prefix string = fmt.Sprintf("%s %s: ", date, fileinfo)
      if options.Fatal {
        prefix = fmt.Sprintf("%s%s", "alert: ", prefix)
      }
  
      if reflect.ValueOf(text).Kind() == reflect.String {
        ld.Printf(fmt.Sprintf("%s%s", prefix, text.(string)))
      } else {
        ld.Printf(fmt.Sprintf("%s%v", prefix, text))
      }
    }
  
    if options.Fatal {
      os.Exit(-1)
    }
  }
  
  func Lstd(text interface{}, optionOpes ...LoggerOptionType) {
    logging(LogStd, text, optionOpes)
  }
  
  func Lerr(text interface{}, optionOpes ...LoggerOptionType) {
    logging(LogErr, text, optionOpes)
  }
