snippet goconf
abbr global goconf
options head
  package global
  
  import (
    "os"
  
    "github.com/miyaizu/golog"
    "github.com/spf13/viper"
  )
  
  type GlobalConfig struct {
  }
  
  var globalConfig *GlobalConfig
  
  func NewGlobalConfig() {
    globalConfig = &GlobalConfig{}
  }
  
  func readGlobalConfig(configPath string) error {
    var err error
  
    viper.SetConfigFile(configPath)
    viper.SetConfigType("json")
    viper.AutomaticEnv()
  
    if err = viper.ReadInConfig(); err != nil {
      switch err.(type) {
      case *os.PathError:
        golog.Debug("Config file not found, use default values")
      default:
        golog.Warn("Failed to read the config file")
        golog.Warn("%v", err)
      }
      return err
    }
  
    if err := viper.Unmarshal(globalConfig); err != nil {
      golog.Warn("Failed to unmarshaling")
      golog.Warn("%v", err)
      return err
    }
  
    return nil
  }
  
  func SetupGlobalConfig(configPath string) {
    NewGlobalConfig()

    if configPath != "" {
      readGlobalConfig(configPath)
    }
  }
  
  func GetGlobalConfig() *GlobalConfig {
    return globalConfig
  }


snippet goarg
abbr global goarg
options head
 func parseArg() options {
   var opts options

   _, err := flags.Parse(&opts)
   if err != nil {
     log.Fatal(err)
   }

   return opts
 }


snippet golog
abbr global golog
options head
  func setupLogger(verbose bool) *zap.SugaredLogger {
	config := zap.NewDevelopmentConfig()
	config.OutputPaths = []string{"stdout"}

	if verbose {
      config.Level = zap.NewAtomicLevelAt(zap.DebugLevel)
	} else {
	  config.Level = zap.NewAtomicLevelAt(zap.InfoLevel)
	}

	zl, _ := config.Build()
	logger := zl.Sugar()

	return logger
  }

